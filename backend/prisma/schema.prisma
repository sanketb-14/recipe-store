// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DietaryPreference {
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  KETO
  PALEO
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique

  password    String
  profilePic  String?
  gender      Gender
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  recipes     Recipe[]
  favorites   Favorite[]
  collections Collection[]
  reviews     Review[]
  followers   User[]       @relation("UserFollows")
  following   User[]       @relation("UserFollows")
  isAdmin     Boolean      @default(false)
}

model Recipe {
  id                String              @id @default(cuid())
  title             String
  description       String
  ingredients       String[]
  instructions      String[]
  cookingTime       Int
  servings          Int
  pictures          String
  dietaryPreference DietaryPreference[]
  difficultyLevel   DifficultyLevel
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  favorites         Favorite[]
  reviews           Review[]
  collections       Collection[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model Collection {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId])
}
